#!/usr/bin/python3
"""class DBStorage"""

from sqlalchemy import create_engine
from os import getenv
from sqlalchemy.orm import sessionmaker, scoped_session


class DBStorage:

    """Private class attributes and Public instance methods:"""

    __engine = None
    __session = None


    def __init__(self):
        """creates the engine"""

        MYSQL_USER = getenv('HBNB_MYSQL_USER')
        MYSQL_PWD = getenv('HBNB_MYSQL_PWD')
        MYSQL_HOST = getenv('HBNB_MYSQL_HOST')
        MYSQL_DB = getenv('HBNB_MYSQL_DB')
        HBNB_ENV = getenv('HBNB_ENV')
        self.__engine = create_engine('mysql+mysqldb://{}:{}@{}/{}'.
                                      format(MYSQL_USER,
                                             MYSQL_PWD,
                                             MYSQL_HOST,
                                             MYSQL_DB), pool_pre_ping=True)
        if HBNB_ENV == "test"
        Base.metadata.drop_all(self.__engine)

    def all(self, cls=None):
        """query on the current database session"""
        if cls is not None:
            session_query = self.__session.query(cls)
        else:
            session_query = self.session.query(User, State, City, Amenity,
                                               Place, Review)
        obj_list = {}
        for obj in session_query:
            key = obj.__class__ + '.' + obj.id
            obj_list[key] = obj
        return obj_list

    def new(self, obj):
        """add the object to database"""
        self.__session.add(obj)

    def save(self):
        """commit changes to database"""
        self.__session.commit()

    def delete(self, obj=None):
        """delete given object from db"""
        if obj is not None:
            self.__session.delete(obj)

    def reload(self):
        """reload the database"""
        Base.metadata.create_all(self.__engine)
        s_factory = sessionmaker(bind=self.__engine, expire_on_commit=False)
        Session = scoped_session(s_factory)
        self.__session = Session()
